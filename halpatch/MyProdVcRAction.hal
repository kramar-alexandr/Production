external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function roundmode SetRoundModeD(Integer);
external updating procedure UpdateTrans_Stock(record TRVc);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean ItemHistExists(string,LongInt);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure UpdateRecalcStockNeeded(Integer);
external function Integer MakeTransFromProd(record TRVc,record ProdVc,Boolean);
//external updating procedure CreateQualConFromProdOnSave(record ProdVc);
external procedure SDSumUp(var record SDVc);
external function Integer CheckObjs(string,string,var string);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure ProdUpdateItemHistory(record ProdVc,record ProdVc);
external updating procedure ProdUpdateSerialNr(record ProdVc,record ProdVc,Boolean);
external updating procedure AddTTrans_ProdVc(record TRVc,record ProdVc);
external updating procedure UpdatePosition(string,string,string,val,val,val);
external updating procedure UpdateProdOrd(record ProdOrderVc,Boolean,val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure CalcProdDuration(var record ProdOrderVc);
external function Boolean IsSerialNrCorrect(string);
external updating procedure ProdUpdateCostPrice(record ProdVc,Boolean);
external updating function val NextLocOKNr(string);
external function Boolean ShouldItemUpdateStock(string);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external updating procedure UpdatePlanned(string,string,string,LongInt,Date,val,Integer,val,val,Boolean);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external procedure ProdFillFIFO(record ProdVc,Boolean);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Boolean SerialNrAvail(string,string,string,val);
external function Boolean SerialNrAvail2(string,string,val);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestProdVc(LongInt,Date,var Boolean);
external updating procedure ProdCalcItemCost(var record ProdVc,record ProdVc,Boolean);

procedure dummy() //##ii
begin //##ii
  SetLangMode(LangRussian,"RUS",0); //##ii
  return; //##ii
end; //##ii

global

updating procedure GenerateOperationSsm() // функция разложения по операциям
begin

  Integer wn, i,j, rwcnt, rwcnt2, recCnt, storeUnit, curComp, prodQty;
  record MyProdVc MyProdr;
  record ProdOperationVc ProdOperationr, ProdOperation2r;
  row MyProdVc MyProdrw, MyProd2rw;
  row ProdOperationVc ProdOperationrw;
  string 255 errStr;
  Boolean TrHs;
  
  curComp = CurrentCompany;
  wn = CurWindow();
  GetWindowRecord(wn,MyProdr);
  rwcnt = matrowcnt(MyProdr);

  if (blank(MyProdr.Qty) or MyProdr.Qty < 1 ) then begin
  	prodQty = 1;
  end else begin
  	prodQty = MyProdr.Qty;
  end;	
  
  if (MyProdr.PRStatusFlag != 2) then begin
  	MessageBox(0, "Статус производства не \"Начато\"");
  	return;
  end;
  
  if (WindowState(wn) != 0) then begin
  	MessageBox(0,"Сохраните запись");
  	return;
  end;

	for (j=0;j<prodQty;j=j+1) begin
  	  	storeUnit = 0;
  		
	  	for (i=0;i<rwcnt;i=i+1) begin

	  	MatRowGet(MyProdr,i,MyProdrw);
		  	switch (MyProdrw.stp) begin
		  	case 1:
			  	if (NonBlank(MyProdrw.Item) and storeUnit == 1) then begin
			  		MatRowGet(ProdOperationr,rwcnt2,ProdOperationrw);
			  		ProdOperationrw.Item = MyProdrw.Item;
			  		ProdOperationrw.Comment = MyProdrw.Comment;
			  		ProdOperationrw.SerialNr = MyProdrw.SerialNr;
			  		ProdOperationrw.InQty = MyProdrw.InQty;
			  		ProdOperationrw.OutQty = MyProdrw.OutQty;
			  		ProdOperationrw.Coefficient = MyProdrw.Coefficient;
			  		ProdOperationrw.Objects = MyProdrw.Objects;
			  		ProdOperationrw.Material = MyProdrw.Material;
			  		MatRowPut(ProdOperationr,rwcnt2,ProdOperationrw);
			  		if (!RecordStore(ProdOperationr,true)) then begin
						errStr = errStr & ProdOperationrw.Item & Chr(13);
			  		end;
			  		rwcnt2 = rwcnt2 + 1;
			  	end;
		  	case 2:
		  		ProdOperation2r.MyProdNr = MyProdr.SerNr;
		  		ProdOperation2r.MyProdOperRow = MyProdrw.OperationNo;	
		    	TrHs = true;
		    	recCnt = 0;	
		  		while (LoopKey("MyProdNr",ProdOperation2r,2,TrHs)) begin
			  		if (ProdOperation2r.MyProdNr != MyProdr.SerNr or ProdOperation2r.MyProdOperRow != MyProdrw.OperationNo ) then begin
			  			TrHs = false;
			  		end else begin
		  				recCnt = recCnt + 1;
		  			end; 		  			
		  		end; ResetLoop(ProdOperation2r);
		  		
	    		if ((prodQty - MyProdrw.Ordered1) > 0 and recCnt == MyProdrw.Ordered1) then begin
	    			RecordNew(ProdOperationr);
		    		ProdOperationr.MyProdNr = MyProdr.SerNr;
		  			ProdOperationr.MyProdOperRow = MyProdrw.OperationNo;
		    	  	ProdOperationr.SerNr = NextSerNr("ProdOperationVc",ProdOperationr.StartDate,-1,false,"");
			  		ProdOperationr.Comment = MyProdrw.ProdComment;
			  		if (RecordStore(ProdOperationr,true)) then begin
			  			storeUnit = 1;
			  			CreateRecordLink(ProdOperationr,curComp,MyProdr,curComp);
			  			CreateRecordLink(MyProdr,curComp,ProdOperationr,curComp);
			  			rwcnt2 = matrowcnt(ProdOperationr);
			  			
			  			MyProdrw.Ordered1 = MyProdrw.Ordered1 + 1;
				    	MatRowPut(MyProdr,i,MyProdrw);
				    	RecordStore( MyProdr, true);
				    end;
				end else begin
					storeUnit = 0;
		    	end;
		  	case 3:
		  		if (NonBlank(MyProdrw.Comment) and storeUnit == 1) then begin
		  			AddToText(MyProdrw.Comment & Chr(32),ProdOperationr);
		  			RecordStore(ProdOperationr,true);
		  		end;
		  		
		  	end; 
	  	
	  	end;
	  
  	end;  
  //putwindowrecord(wn,MyProdr);
  if (NonBlank(errStr)) then begin
  	errStr = "Проблема с товаром:" & Chr(13) & Chr(13) & errStr;
  	MessageBox(0,errStr);
  end;

  return;
end;


function LongInt IsAnyProdOperationNotCancelled(LongInt ProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.ProdNr = ProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 1; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 3; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 5; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyProdOperationNotCancelled = res;
  return;
end;

function LongInt IsAnyProdOperationNotFinished(LongInt ProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.ProdNr = ProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end else begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyProdOperationNotFinished = res;
  return;
end;


function LongInt IsAnyMyProdOperationNotCancelled(LongInt MyProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  ProdOpr.MyProdNr = MyProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end;
  if (res<0) then begin
    ProdOpr.MyProdNr = MyProdNr;
    ProdOpr.PRStatusFlag = 1; 
    if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.MyProdNr = MyProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.MyProdNr = MyProdNr;
    ProdOpr.PRStatusFlag = 3; 
    if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.MyProdNr = MyProdNr;
    ProdOpr.PRStatusFlag = 5; 
    if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyMyProdOperationNotCancelled = res;
  return;
end;

function LongInt IsAnyMyProdOperationNotFinished(LongInt MyProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.MyProdNr = MyProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end else begin
    ProdOpr.MyProdNr = MyProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("MyProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyMyProdOperationNotFinished = res;
  return;
end;

global
procedure SetMyProdTime(record MyProdVc MyProdr,record MyProdVc MyProd2r,Boolean updatef)
begin
  if (MyProdr.PRStatusFlag==2) then begin
    if (updatef) then begin
      if (MyProd2r.PRStatusFlag<2) then begin
        if (blanktime(MyProdr.StartTime)) then begin
          MyProdr.StartTime = CurrentTime;
        end;
        if (blankdate(MyProdr.StartDate)) then begin
          MyProdr.StartDate = CurrentDate;
        end;
      end;
    end else begin
      if (blanktime(MyProdr.StartTime)) then begin
        MyProdr.StartTime = CurrentTime;
      end;
      if (blankdate(MyProdr.StartDate)) then begin
        MyProdr.StartDate = CurrentDate;
      end;
    end;
  end;
  if ((MyProdr.PRStatusFlag==3) or (MyProdr.PRStatusFlag==5)) then begin
    if (updatef) then begin
      if (MyProd2r.PRStatusFlag<3) then begin
        if (blanktime(MyProdr.StartTime)) then begin
          MyProdr.StartTime = AddMinutes(CurrentTime,-1);
        end;
        if (blanktime(MyProdr.EndTime)) then begin
          MyProdr.EndTime = CurrentTime;
        end;
        if (blankdate(MyProdr.StartDate)) then begin
          MyProdr.StartDate = CurrentDate;
        end;
      end;
    end else begin
      if (blanktime(MyProdr.StartTime)) then begin
        MyProdr.StartTime = AddMinutes(CurrentTime,-1);
      end;
      if (blanktime(MyProdr.EndTime)) then begin
        MyProdr.EndTime = CurrentTime;
      end;
      if (blankdate(MyProdr.StartDate)) then begin
        MyProdr.StartDate = CurrentDate;
      end;
    end;
  end;
  return;
end;


global //Edit***************************Sasha2,9:46 25.06.2014 {
function Integer IsUnOKAllowed_MyProdVc(record MyProdVc MyProdp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (MyProdp.ProdDate<MSb.StockCorectAfter) then begin
      res = 22078; //20884;
      goto LIsUnOKAllowed_ProdVc;
    end;
  end else begin
    res = 22078; //20884;
    goto LIsUnOKAllowed_ProdVc;
  end;
LIsUnOKAllowed_ProdVc:;  
  IsUnOKAllowed_MyProdVc = res;
  return;
end; //Edit***************************Sasha2,9:46 25.06.2014 }

global
updating function LongInt DoMyProdVcRecordCheck(var record MyProdVc MyProdp,record MyProdVc MyProd2p,LongInt stat,LongInt check,Boolean donotcalctimecostf,var record TRVc gTRp,var Integer rowno,var string extracom,var string fieldnam)
BEGIN //Edit***************************Sasha2,13:25 24.06.2014 {
  LongInt res;
  record MainStockBlock MainStockRec;
  record INVc INr;
  record ItemStatusVc ISr;
  row MyProdVc MyProdrw;
  row MyProdVc MyProd2rw;
  Integer i,rwcnt,j,cnt;
  Integer insertmode,updatemode;
  Integer errcode;
  LongInt sernr;
  LongInt oldnr,newnr;
  Boolean gentrans,relf;
  Boolean transf;
  string 255 location,tstr;
  val t,prev,qty;
  Integer totoutlines,totoutrellines;
  record StandProblemVc SPr;
  record LocationVc Locr;
  record UserVc Userr;
  record RecVc Recr;
  record AccBlock Accb;
  record ProdAccBlock PAb;
  record ProdOperationVc ProdOpr;
  record RoutingVc Routingr;
  record ProdVc orgProdr;
  record ProdClassVc ProdClassr;
  Boolean unokf;
  record BatchTextVc BTr;

  rowno = -1;
  extracom = "";
  fieldnam = "";
  totoutlines = 0;
  totoutrellines = 0;
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = MyProdp.SerNr;
  BlockLoad(MainStockRec);
  BlockLoad(PAb);
  location = MyProdp.Location;
  if (blank(location)) then begin
    //location = MainStockRec.MainStock; 
    fieldnam = "Location";
    res = 1058; 
    goto LProdVcRecordCheck;
  end;
  transf = false;
  if ((MyProdp.PRStatusFlag==3) or (MyProdp.PRStatusFlag==5)) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if ((MyProd2p.PRStatusFlag!=3) and (MyProd2p.PRStatusFlag!=5)) then begin transf = true; end;
    end;
  end;
   if (stat==updatemode) then begin
    if (MyProdp.SerNr<=0) and (MyProd2p.PRStatusFlag==0) then begin
      MyProdp.SerNr = MyProd2p.SerNr;
    end;
  end;   
  if (MyProdp.PRStatusFlag==0) then begin
    if (stat==updatemode) then begin
      if (MyProd2p.PRStatusFlag!=0) then begin unokf = true; end;
    end;
  end;
  if (MyProdp.PRStatusFlag==2) then begin
    if (stat==updatemode) then begin
      if (MyProd2p.PRStatusFlag>2) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_MyProdVc(MyProdp);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"ProdDate");      
      res = -1; 
    end;
    goto LProdVcRecordCheck;
  end;  
  relf = true;  
  rwcnt = MatRowCnt(MyProdp);
  if (MyProdp.SerNr<=0) then begin
    MyProdp.SerNr = NextSerNr("MyProdVc",MyProdp.ProdDate,-1,false,"");
  end;
  if (SerNrTestProdVc(MyProdp.SerNr,MyProdp.ProdDate,gentrans)==false) then begin
    fieldnam = "SerNr";
    res = 1557; 
    goto LProdVcRecordCheck;
  end;
  if (Date2Test("MyProdVc",MyProdp.ProdDate,"ProdDate",-1)==false) then begin // Should not call RecordCheckError really
    res = -1;
    goto LProdVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,MyProdp.ProdDate,"ProdDate",-1)) then begin
    res = -1;
    goto LProdVcRecordCheck;
  end;
  if (check!=0) and (transf) then begin
    rwcnt = MatRowCnt(MyProdp);
    if (rwcnt==0) then begin
      RecordCheckError(1030,"",0,"ItemCode");      
      res = -1;
      goto LProdVcRecordCheck;
    end;
    if (MyProdp.Qty==0) then begin
      fieldnam = "Qty";
      res = 1058; 
      goto LProdVcRecordCheck;
    end;
    /*if (MyProdp.Disassemble!=0) then begin
      orgProdr.OrgProdNr = MyProdp.SerNr;
      if (ReadFirstKey("OrgProdNr",orgProdr,1,true)) then begin
        fieldnam = "SerNr";
        res = 20879; 
        goto LProdVcRecordCheck;
      end;
    end;*/
  end;
  if (check!=0) then begin
    if (nonblank(MyProdp.Inspector)) then begin
      Userr.Code = MyProdp.Inspector;
      if (ReadFirstMain(Userr,1,true)==false) then begin
        extracom = MyProdp.Inspector; 
        fieldnam = "Inspector";
        res = 1120; 
        goto LProdVcRecordCheck;
      end;
    end;  
    if (nonblank(MyProdp.Routing)) then begin
      Routingr.Code = MyProdp.Routing;
      if (ReadFirstMain(Routingr,1,true)==false) then begin
        extracom = MyProdp.Routing; 
        fieldnam = "Routing";
        res = 1120; 
        goto LProdVcRecordCheck;
      end;
    end;
    if (nonblank(MyProdp.Person)) then begin
      Userr.Code = MyProdp.Person;
      if (ReadFirstMain(Userr,1,true)==false) then begin
        extracom = MyProdp.Person; 
        fieldnam = "Person";
        res = 1120; 
        goto LProdVcRecordCheck;
      end;
    end;  
    /*if (IsRecipeClosed(MyProdp.Recepy)) then begin
      fieldnam = "Recepy";
      res = 2088; 
      goto LProdVcRecordCheck;
    end;
    if (nonblank(MyProdp.Recepy)) then begin
      Recr.Code = MyProdp.Recepy;
      if (ReadFirstMain(Recr,1,true)==false) then begin
        extracom = MyProdp.Recepy; 
        fieldnam = "Recepy";
        res = 1120; 
        goto LProdVcRecordCheck;
      end;
    end;*/
    if (MyProdp.Qty<0) then begin
      extracom = ""; 
      fieldnam = "Qty";
      res = 1574; 
      goto LProdVcRecordCheck;
    end;

    if (nonblank(MyProdp.StandProblem)) then begin
      SPr.Code = MyProdp.StandProblem;
      if (ReadFirstMain(SPr,1,true)==false) then begin
        extracom = MyProdp.StandProblem; 
        fieldnam = "StandProblem";
        res = 1120; 
        goto LProdVcRecordCheck;
      end;
    end;
	
	if (nonblank(MyProdp.Objects)) then begin
	    errcode = CheckObjs("",MyProdp.Objects,tstr);
	    if (errcode!=0) then begin
	      extracom = tstr; 
	      fieldnam = "Objects";
	      res = errcode; 
	      goto LProdVcRecordCheck;
	    end;
	end;
  end;
  if (MyProdp.StartDate>MyProdp.ProdDate) then begin
    fieldnam = "StartDate";
    res = 20851; 
    goto LProdVcRecordCheck;
  end;
  if (nonblank(location)) then begin
    Locr.Code = location;
    if (ReadFirstMain(Locr,1,true)==false) then begin
      extracom = location; 
      fieldnam = "Location";
      res = 1120; 
      goto LProdVcRecordCheck;
    end;
    if (Locr.RequirePos!=0) then begin
      extracom = " " & location; 
      fieldnam = "Location";
      res = 1748; 
      goto LProdVcRecordCheck;
    end;
  end;  
  if (nonblank(MyProdp.ProdClass)) then begin
    ProdClassr.Code = MyProdp.ProdClass;
    if (ReadFirstMain(ProdClassr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"ProdClass");      
      res = -1;
      goto LProdVcRecordCheck;
    end;
  end;
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(MyProdp,i,MyProdrw);
    if (nonblank(MyProdrw.Item)) then begin
      if (ReadFirstItem(MyProdrw.Item,INr,true,true)==false) then begin
        extracom = MyProdrw.Item; 
        fieldnam = "Item";
        rowno = i;
        res = 1120; 
        goto LProdVcRecordCheck;
      end;
      if (INr.Terminated==1) then begin
        extracom = MyProdrw.Item; 
        fieldnam = "Item";
        rowno = i;
        res = 1266; 
        goto LProdVcRecordCheck;
      end;
      if (nonblank(MyProdp.Objects)) then begin
	      errcode = CheckObjs("",MyProdrw.Objects,tstr);
	      if (errcode!=0) then begin
	        extracom = tstr; 
	        fieldnam = "Objects";
	        rowno = i;
	        res = errcode; 
	        goto LProdVcRecordCheck;
	      end;
      end;
      if (MyProdrw.OutQty>0) then begin
        totoutlines = totoutlines + 1;
        if (MyProdrw.RelVal!=0) then begin
          totoutrellines = totoutrellines + 1;
        end;
        if (relf) then begin
          relf = nonblank(MyProdrw.RelVal);
        end;
        if (INr.ItemType==kItemTypeStructured) then begin
          extracom = " " & MyProdrw.Item; 
          fieldnam = "Item";
          rowno = i;
          res = 1826; 
          goto LProdVcRecordCheck;
        end;
        /*if (MyProdp.Disassemble==0) then begin
          if (INr.ItemType==kItemTypePlain) then begin
            extracom = ": " & MyProdrw.Item; 
            fieldnam = "Item";
            rowno = i;
            res = 27353; 
            goto LProdVcRecordCheck;
          end;
          if (INr.ItemType==kItemTypeService) then begin
            extracom = ": " & MyProdrw.Item; 
            fieldnam = "Item";
            rowno = i;
            res = 1954; 
            goto LProdVcRecordCheck;
          end;
        end;*/
      end;
      if (MyProdrw.OutQty<0) then begin
        fieldnam = "OutQty";
        rowno = i;
        res = 1574; 
        goto LProdVcRecordCheck;
      end;
      if (MyProdrw.InQty>0) then begin
        if (INr.ItemType==2) then begin
          extracom = MyProdrw.Item; 
          fieldnam = "Item";
          rowno = i;
          res = 1826; 
          goto LProdVcRecordCheck;
        end;
        BTr.ArtCode = MyProdrw.Item;
        BTr.SerialNr = MyProdrw.SerialNr;
        if (ReadFirstMain(BTr,2,true)) then begin 
          if (BTr.ConsigStock!=0) then begin
            extracom = MyProdrw.Item; 
            fieldnam = "Item";
            rowno = i;
            res = 20118; 
            goto LProdVcRecordCheck;
          end;
        end;
      end;
      if (MyProdrw.InQty<0) then begin
        fieldnam = "InQty";
        rowno = i;
        res = 1574; 
        goto LProdVcRecordCheck;
      end;
      /*if (CheckAllowedSize(INr,Prodrw.UnitXval,MyProdrw.UnitYval,MyProdrw.UnitZval)==false) then begin
        fieldnam = "UnitXval";
        rowno = i;
        res = 1480; 
        goto LProdVcRecordCheck;
      end;
      if (INr.ItemType==1) then begin
        /if (ProdCheckVolume(MyProdp,i)==false) then begin
          fieldnam = "Item";
          rowno = i;
          res = 2000; 
          goto LProdVcRecordCheck;
        end;      
        if (CheckSerialStatus(MyProdrw.Item,MyProdrw.SerialNr,tstr)==2) then begin
          extracom = tstr;
          fieldnam = "SerialNr";
          rowno = i;
          res = 2210; 
          goto LProdVcRecordCheck;
        end;
      end;

		// StockRecordForLocationAllowed function is not realized in tools
      if (StockRecordForLocationAllowed("MyProdVc",MyProdp.Location,MyProdrw.Item,MyProdp.ProdDate,MyProdp.PRStatusFlag,errcode,extracom)==false) then begin
        res = errcode;
        fieldnam = "ArtCode";
        rowno = i;
        goto LProdVcRecordCheck;
      end;*/
      if ((MyProdp.PRStatusFlag==3) or (MyProdp.PRStatusFlag==5) or (MyProdp.PRStatusFlag==2)) then begin //Edit***************************Sasha2,15:39 24.06.2014
        if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
          if (IsSerialNrCorrect(MyProdrw.SerialNr)==false) then begin
            extracom = MyProdrw.SerialNr;
            fieldnam = "SerialNr";
            rowno = i;
            res = 24154; 
            goto LProdVcRecordCheck;
          end;
          if (MainStockRec.NoSerOnPU==0) then begin
            if ((blank(MyProdrw.SerialNr)) and (MyProdrw.OutQty!=0)) then begin
              fieldnam = "SerialNr";
              rowno = i;
              res = 1239; 
              goto LProdVcRecordCheck;
            end;
          end;
          if (MyProdrw.InQty!=0) then begin  // check if ser nr. exists 
            if (INr.SerNrf==1) then begin
              if (blank(MyProdp.Routing)) then begin
                switch (MyProdp.RowsHoldActualQty) begin
                  case 1: prev = MyProdrw.InQty;
                  otherwise prev = MyProdrw.InQty*MyProdp.Qty;
                end;
                if (prev>1) then begin
                  fieldnam = "SerialNr";
                  rowno = i;
                  res = 1242; 
                  goto LProdVcRecordCheck;
                end;
                for (j=0;j<i;j=j+1) begin
                  MatRowGet(MyProdp,j,MyProd2rw);
                  if ((MyProdrw.Item==MyProd2rw.Item) and (MyProdrw.SerialNr==MyProd2rw.SerialNr)) then begin
                    fieldnam = "SerialNr";
                    rowno = i;
                    res = 1242; 
                    goto LProdVcRecordCheck;
                  end;
                end;
                switch (MyProdp.RowsHoldActualQty) begin
                  case 1: t = MyProdrw.InQty;
                  otherwise t = MyProdrw.InQty*MyProdp.Qty;
                end;
                if (SerialNrAvail(MyProdrw.Item,MyProdrw.SerialNr,location,t)==false) then begin
                  fieldnam = "SerialNr";
                  rowno = i;
                  res = 1240; 
                  goto LProdVcRecordCheck;
                end;
              end;
            end else begin
              prev = 0;
              for (cnt=0;cnt<i;cnt=cnt+1) begin
                MatRowGet(MyProdp,cnt,MyProd2rw);
                if ((MyProd2rw.Item==MyProdrw.Item) and (MyProd2rw.SerialNr==MyProdrw.SerialNr)) then begin
                  switch (MyProdp.RowsHoldActualQty) begin
                    case 1: prev = prev + MyProd2rw.InQty;
                    otherwise prev = prev + MyProd2rw.InQty*MyProdp.Qty;
                  end;                  
                end;
              end;
              switch (MyProdp.RowsHoldActualQty) begin
                case 1: prev = prev + MyProdrw.InQty;
                otherwise prev = prev + MyProdrw.InQty*MyProdp.Qty;
              end;
              if (blank(MyProdp.Routing)) then begin
                if (SerialNrAvail(MyProdrw.Item,MyProdrw.SerialNr,location,prev)==false) then begin
                  fieldnam = "SerialNr";
                  rowno = i;
                  res = 1240; 
                  goto LProdVcRecordCheck;
                end;
              end;
            end;   
            if (INr.SerNrf==1) then begin              
              switch (MyProdp.RowsHoldActualQty) begin
                case 1: t = MyProdrw.InQty;
                otherwise t = MyProdrw.InQty*MyProdp.Qty;
              end;      
              if (blank(MyProdp.Routing)) then begin
                if (SerialNrAvail(MyProdrw.Item,MyProdrw.SerialNr,location,t)==false) then begin
                  fieldnam = "SerialNr";
                  rowno = i;
                  res = 1240; 
                  goto LProdVcRecordCheck;
                end;
              end;
            end;
          end;
          if (MyProdrw.OutQty!=0) then begin  // check if ser nr. exists 
            if (INr.SerNrf==1) then begin // serial nr checking 
//              if (Prodrw.InQty>0) then begin
//              if (SerialNrAvail(Prodrw.Item,Prodrw.SerialNr,Prodp.Location,Prodrw.InQty)==true) then begin
              if (SerialNrAvail2(MyProdrw.Item,MyProdrw.SerialNr,1)==true) then begin //We cannot produce a item if at least one exists in stock            
                fieldnam = "SerialNr";
                rowno = i;
                res = 1241; 
                goto LProdVcRecordCheck;
              end;
//            end;
              if (MainStockRec.NoSerOnPU==0) then begin   
                switch (MyProdp.RowsHoldActualQty) begin
                  case 1: t = MyProdrw.OutQty;
                  otherwise t = MyProdrw.OutQty*MyProdp.Qty;
                end;      
                if (t>1) then begin
                  fieldnam = "SerialNr";
                  rowno = i;
                  res = 1242; 
                  goto LProdVcRecordCheck;
                end;
              end;
            end;
          end;
        end;
        if (check>0) then begin
        if (MainStockRec.dontAllowOvership==1) then begin
          if (MyProdrw.InQty!=0) then begin
            if (INr.ItemType==1) and (blank(MyProdp.Routing)) then begin
              qty = 0;
              for (j=0;j<i;j=j+1) begin
                MatRowGet(MyProdp,j,MyProd2rw);
                if (MyProd2rw.Item==MyProdrw.Item) then begin                  
                  switch (MyProdp.RowsHoldActualQty) begin
                    case 1: qty = qty + MyProd2rw.InQty;
                    otherwise qty = qty + MyProd2rw.InQty*MyProdp.Qty;
                  end;      
                end;
              end;
              switch (MyProdp.RowsHoldActualQty) begin
                case 1: qty = qty + MyProdrw.InQty;
                otherwise qty = qty + MyProdrw.InQty*MyProdp.Qty;
              end;                    
              FindStockValue(MyProdrw.Item,location,ISr);
              if (ISr.Instock<qty) then begin
                fieldnam = "InQty";
                rowno = i;
                res = 1247; 
                goto LProdVcRecordCheck;
              end;
            end;
          end;
        end;
        end;
        if (MainStockRec.requireLocation!=0) then begin
          if (blank(MyProdp.Location)) then begin
            extracom = MyProdp.Location;
            fieldnam = "Location";
            res = 1058; 
            goto LProdVcRecordCheck;
          end;
        end;
      end;
    end else begin
      if (MyProdrw.stp == 2) then begin
      	if (blank(MyProdrw.MachineGroup)) then begin
	      	fieldnam = "MachineGroup";
	        rowno = i;
	        res = 1058; 
	        goto LProdVcRecordCheck;
      	end;
      	if (blank(MyProdrw.Machine)) then begin
	      	fieldnam = "Machine";
	        rowno = i;
	        res = 1058; 
	        goto LProdVcRecordCheck;
      	end;
      end;
      if (MyProdrw.InQty!=0) then begin
        fieldnam = "Item";
        rowno = i;
        res = 1058; 
        goto LProdVcRecordCheck;
      end;
      if (MyProdrw.OutQty!=0) then begin
        fieldnam = "Item";
        rowno = i;
        res = 1058; 
        goto LProdVcRecordCheck;
      end;
    end;
  end;
  if (MyProdp.PRStatusFlag==3) then begin
    if (totoutlines>0) then begin
      if (MyProdp.Disassemble==0) then begin
        if ((totoutlines>1) and (totoutrellines!=totoutlines)) then begin
          if (relf==false) then begin
            fieldnam = "SerNr";
            rowno = -1;
            res = 2177; 
            goto LProdVcRecordCheck;
          end;
        end;
      end;
    end else begin
      fieldnam = "OutQty";
      rowno = rwcnt - 1;
      if (rowno<0) then begin
        rowno = 0;
      end;
      res = 2165; 
      goto LProdVcRecordCheck;
    end;
  end;
  //if (nonblank(MyProdp.Routing)) then begin
    switch (MyProdp.PRStatusFlag) begin
      case 2:
        if (blank(MyProdp.Location)) then begin
          extracom = MyProdp.Location;
          fieldnam = "Location";
          res = 1058; 
          goto LProdVcRecordCheck;
        end;
      case 4:
        if (IsAnyMyProdOperationNotCancelled(MyProdp.SerNr)>0) then begin
          fieldnam = "SerNr";
          res = 20783; 
          goto LProdVcRecordCheck;
        end;
      case 5:
        ProdOpr.MyProdNr = MyProdp.SerNr;
        if (ReadFirstKey("ProdNr",ProdOpr,1,true)) then begin
          fieldnam = "SerNr";
          if (ProdOpr.PRStatusFlag==3) then begin
            res = 20784; 
          end else begin
            res = 20783; 
          end;
          goto LProdVcRecordCheck;
        end;
    end;
    if (transf) then begin
      ProdOpr.MyProdNr = MyProdp.SerNr;
      if (ReadFirstKey("ProdNr",ProdOpr,1,true)==false) then begin
        fieldnam = "SerNr";
        res = 20759; 
        goto LProdVcRecordCheck;
      end;
      sernr = IsAnyMyProdOperationNotFinished(MyProdp.SerNr);      
      if (sernr>0) then begin
        fieldnam = "SerNr";
        extracom = " " & sernr;
        res = 20776; 
        goto LProdVcRecordCheck;
      end;
    end;
  //end;
  if (check!=0) then begin
    if (blank(MyProdp.Routing)) then begin
      if (donotcalctimecostf==false) then begin
        if (stat==updatemode) then begin
          SetMyProdTime(MyProdp,MyProd2p,true);
          //ProdCalcItemCost(Prodp,Prod2p,true); //Edit***************************Sasha2,14:47 24.06.2014
       end else begin
          SetMyProdTime(MyProdp,MyProd2p,false);
          //ProdCalcItemCost(Prodp,Prod2p,false); //Edit***************************Sasha2,14:47 24.06.2014
        end;
      end;
      //ProdFillFIFO(Prodp,true); //Edit***************************Sasha2,14:47 24.06.2014
    end;
  end;
  if (MyProdp.PRStatusFlag==5) then begin
    if (blank(MyProdp.StandProblem)) then begin
      fieldnam = "StandProblem";
      res = 1058; 
      goto LProdVcRecordCheck;
    end;
  end;

  if (transf) then begin
    if (stat==updatemode) then begin
      sernr = MyProd2p.SerNr;
    end;
    if (check>0) then begin
      if (MainStockRec.Chronology!=0) then begin 
        /*if (ExistStockTrans(location,Prodp.ProdDate,errcode,extracom,"ProdVc",sernr,MainStockRec)) then begin //Edit***************************Sasha2,14:49 24.06.2014
          fieldnam = "ProdDate";
          res = errcode; 
          goto LProdVcRecordCheck;
        end;*/
      end;
    end;
    /*if (CanOKStockRecord(errcode)==false) then begin // transaction variable
      fieldnam = "SerNr";
      res = errcode;
      goto LProdVcRecordCheck;
    end;*/
  end;
  if (gentrans==false) then begin transf = false; end;
  if (nonblank(MyProdp.Routing)) and (PAb.ProdTransaction==0) then begin transf = false; end;
  if (transf) then begin
    /*errcode = MakeTransFromProd(gTRp,Prodp,false); //Edit***************************Sasha2,14:54 24.06.2014 {
    if (errcode!=0) then begin
      fieldnam = "SerNr";
      res = errcode; 
      goto LProdVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==ProdYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        extracom = tstr;
        fieldnam = "SerNr";
        res = 1085; 
        goto LProdVcRecordCheck;
      end;
    end; */   //Edit***************************Sasha2,14:54 24.06.2014 }
  end;
LProdVcRecordCheck:;
  if (res!=0) then begin
    MyProdp.SerNr = oldnr;
  end;
  DoMyProdVcRecordCheck = res;
  RETURN;
END; //Edit***************************Sasha2,13:25 24.06.2014 }

global
updating function LongInt MyProdVcRecordCheck(var record MyProdVc MyProdp,record MyProdVc MyProd2p,LongInt stat,LongInt check) //Edit***************************Sasha2,13:25 24.06.2014{
begin
  LongInt res;
  record TRVc gTRp;
  string 100 extracom,fieldnam;
  Integer rowno;
  //transaction string 255 gRuniningMaint;
  transaction Boolean gProdDoNotCalcTimeCostf;
  
  res = DoMyProdVcRecordCheck(MyProdp,MyProd2p,stat,check,gProdDoNotCalcTimeCostf,gTRp,rowno,extracom,fieldnam);
  if (res>0) then begin
    RecordCheckError(res,extracom,rowno,fieldnam);      
    res = -1;
    goto LProdVcRecChk;
  end;
  /*if (res==0) then begin
    if ((gTRp.Number>0) and (gTRp.IntYc==ProdYc)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":
          UpdateTrans_Stock(gTRp);          
        otherwise
          SaveTrans(gTRp);
          AddTTrans_ProdVc(gTRp,Prodp);
      end;
    end;
  end;*/
LProdVcRecChk:;
  MyProdVcRecordCheck = res;
  RETURN;
END;//Edit***************************Sasha2,13:25 24.06.2014 }


global
function LongInt MyProdVcRecordDefaults(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt long1,LongInt long2) //Edit***************************Sasha2,16:02 10.06.2014
BEGIN
  LongInt res;
  Time blankt;
  record UserVc USr;
  record ProdSettingsBlock PSb;
  
  BlockLoad(PSb);
  res = 0;
  MyProdr.SerNr = -1;
  MyProdr.StartDate = CurrentDate;
  if (SingleUserMode) then begin
    MyProdr.SerNr = NextSerNr("MyProdVc",MyProdr.ProdDate,-1,false,"");
  end;
  MyProdr.Qty = 1;
  /*MyProdr.DoneFlag = 0;
  MyProdr.PRStatusFlag = 0;
  MyProdr.FinnishedFlag = 0;
  GetCurUser(USr);  
  MyProdr.Location = USr.Location;
  MyProdr.StartTime = blankt;
  MyProdr.EndTime = blankt;
  MyProdr.BreakTime = blankt;
  MyProdr.ProdOrder = -1;
  MyProdr.OrderNr = -1;
  MyProdr.TotalProdOrdQty = BlankVal;
  MyProdr.RowsHoldActualQty = PSb.ProdRowsHoldActualQty;*/
  MyProdVcRecordDefaults = res;
  RETURN;
END; //Edit***************************Sasha2,16:02 10.06.2014


/*global
updating function LongInt MyProdVcRecordCheck(var record MyProdVc MyProdp,record MyProdVc MyProd2p,LongInt stat,LongInt check)
begin
  LongInt res;
  
  res = 0;
  
  if (MyProdp.SerNr<=0) then begin
    MyProdp.SerNr = NextSerNr("MyProdVc",MyProdp.ProdDate,-1,false,"");
  end;
  
LMyProdVcRecChk:;
  MyProdVcRecordCheck = res;
  RETURN;
END;*/

global
updating function LongInt MyProdVcRecordSave(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = 0;
	
  MyProdVcRecordSave = res;
  RETURN;
END;


global
updating function LongInt MyProdVcRecordSaveAfter(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = 0;
  
  MyProdVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordUpdate(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	
	res = 0;
 
  MyProdVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordUpdateAfter(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;
  Boolean ihef;

	res = 0;
  
  MyProdVcRecordUpdateAfter = res;
  RETURN;
END;
