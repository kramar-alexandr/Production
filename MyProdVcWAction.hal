remote updating procedure InsertProdOperationRow(var record MyProdVc,integer);
remote function boolean TestNextProdOperationExists(record MyProdVc,integer);
external inner procedure ExtractObj(string,var Integer,var string);

SetLangMode(LangRussian,"RUS",0);

function boolean MyProdDClassMotherOperationsEFAfter(integer wn,integer rownr,integer changed)
begin
	boolean res;
	integer mtrw,i,pos;
	string 20 tstr;
	record MyProdVc MyProdr;
	row MyProdVc MyProdrw;
	boolean foundf;
	string 200 prodstr;
	
	res = true;
	if(changed>0)then begin
		getwindowrecord(wn,MyProdr);
		mtrw = matrowcnt(MyProdr);
		matrowget(MyProdr,rownr,MyProdrw);
		prodstr = MyProdrw.MotherOperations;
		if(nonblank(prodstr))then begin
			pos = 0;
			ExtractObj(prodstr,pos,tstr);
			While (nonblank(tstr)) begin
				foundf = false;
				if(nonblank(tstr))then begin
					For(i=0;i<rownr;i=i+1) begin
						matrowget(MyProdr,i,MyProdrw);
						if(MyProdrw.stp==2 and MyProdrw.OperationNo==stringtoint(tstr))then begin
							foundf = true;
						end;
					end;
					if(foundf==false)then begin
						res = false;
						messagebox(0,"Operation not found");
						goto LProdDClassMotherOperationsEFAfter;
					end;
				end;
				ExtractObj(prodstr,pos,tstr);
			end;
			
			 
		end;
	end;
	
	MyProdDClassMotherOperationsEFAfter = res;
	LProdDClassMotherOperationsEFAfter:;
	
return;
end;

function boolean MyProdDClassItemEFAfter(integer wn,integer rownr,integer changed)
begin
  record MyProdVc MyProdr;
  record INVc INr;
  row MyProdVc MyProdrw;	
  Integer i,rwcnt;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,MyProdr);
    MatRowGet(MyProdr,rownr,MyProdrw);
    if (rownr==0) then begin
      MessageBox(0,"Дабавте операцию");
      res = false;     
    end else begin
      INr.Code=MyProdrw.Item;
      if (ReadFirstMain(INr,1,true)) then begin
        MyProdrw.Comment=INr.Name;
        MatRowPut(MyProdr,rownr,MyProdrw);
        res = true;
      end else begin
        MessageBox(0,"Код товара не зарегистрирован");
        res = false;     
      end;
      PutWindowRecord(wn,MyProdr);
    end;
  end;
  MyProdDClassItemEFAfter = res;
  return;
end;

function boolean MyProdDClassOutQtyEFAfter(integer wn,integer rownr,integer changed)
begin
  record MyProdVc MyProdr;
  record INVc INr;
  row MyProdVc MyProdrw;	
  Integer i,rwcnt;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,MyProdr);
    MatRowGet(MyProdr,rownr,MyProdrw);
    INr.Code=MyProdrw.Item;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.SerNrf!=0) then begin
        MessageBox(0,"Введите серийный номер товара");
        res = false;     
      end;
    end;
  end;
  MyProdDClassOutQtyEFAfter = res;
  return;
end;

global
function Boolean MyProdDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

	res = inner.MyProdDClassAfterEditField(wn,fieldname,fn,rownr,changed);
	
  switch (fieldname) begin
    case "MotherOperations": res = MyProdDClassMotherOperationsEFAfter(wn,rownr,changed);
    case "Item":  res = MyProdDClassItemEFAfter(wn,rownr,changed);
    case "OutQty":  res = MyProdDClassOutQtyEFAfter(wn,rownr,changed);
//    case "InQty":  res = MyProdDClassInOutQtyEFAfter(wn,rownr,changed);
  end;
  MyProdDClassAfterEditField = res;
  RETURN;
END;

global 
function Boolean MyProdDClassInsertRowTest(Integer wn, Integer rownr)
begin
  Boolean res;
  record MyProdVc MyProdr;

  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,MyProdr);
      if (MyProdr.PRStatusFlag>=3) and (MyProdr.PRStatusFlag<=5) then begin res = false; end;
      if (MyProdr.Disassemble!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,MyProdr);
      if (MyProdr.PRStatusFlag>=3) and (MyProdr.PRStatusFlag<=5) then begin res = false; end;
      if (MyProdr.Disassemble!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  
  if(res)then begin
  	res = TestNextProdOperationExists(MyProdr,rownr);// Edit ************************** Monday, 5 May 2014 16:19:07
  end;

  MyProdDClassInsertRowTest = res;
  return;
end;

global 
function Boolean MyProdDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record MyProdVc MyProdr;
  Boolean res;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,MyProdr);
      if (MyProdr.PRStatusFlag>=3) and (MyProdr.PRStatusFlag<=5) then begin res = false; end;
      if (MyProdr.Disassemble!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,MyProdr);
      if (MyProdr.PRStatusFlag>=3) and (MyProdr.PRStatusFlag<=5) then begin res = false; end;
      if (MyProdr.Disassemble!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  if(res)then begin
  	res = TestNextProdOperationExists(MyProdr,rownr);// Edit ************************** Monday, 5 May 2014 16:19:07
  end;
  MyProdDClassDeleteRowTest = res;
  return;
end;

global
updating procedure GenSerialNrMyProd()
begin
  Integer wn, rownr, i;
  record MyProdVc MyProdr;
  row MyProdVc MyProdrw, MyProd2rw;
  
  wn = CurWindow();
  if (WindowState(wn)!=Rs_insert) then begin
    rownr = WindowActiveRow(wn);
    GetWindowRecord(wn,MyProdr);
    DeselectWindow(wn,false);
    MatRowGet(MyProdr,rownr,MyProdrw);
    if (NonBlank(MyProdrw.InQty) or NonBlank(MyProdrw.OutQty)) then begin
      if NonBlank(MyProdrw.InQty) then begin
        for (i=0;i<rownr-1;i=i+1) begin
          MatRowGet(MyProdr,i,MyProd2rw);
          if (MyProd2rw.Item==MyProdrw.Item) then begin
            MyProdrw.SerialNr = MyProd2rw.SerialNr;
          end;
        end;
        if Blank(MyProdrw.SerialNr) then begin
          MessageBox(0, "Этот товар не был изготовлен в данном производстве");
        end;
      end else begin
        for(i=0;i<rownr;i=i+1) begin
          matrowget(MyProdr,i,MyProd2rw);
          if(MyProd2rw.stp==2)then begin
            MyProdrw.SerialNr = MyProdr.SerNr & "-" & MyProd2rw.OperationNo;
          end;
        end;
      end;
      MatRowPut(MyProdr,rownr,MyProdrw);
      PutWindowRecord(wn,MyProdr);
    end else begin
      MessageBox(0, "Заполните поле 'Затр.' или 'Выпуск'");
    end;
  end else begin
    MessageBox(0, "Сохраните запись");
  end;

  return;
end;

global
updating procedure AddProdOperRowDsm()
begin
  Integer wn,rownr,mtrw,opermax,insertrowno,insertrowcnt,i;
  record MyProdVc MyProdr;
	row MyProdVc MyProdrw,MyProd2rw;
	Boolean testf;
	
	testf = false;
  wn = CurWindow;
	rownr = WindowActiveRow(wn);
	//DeselectWindow(wn,false);
	GetWindowRecord(wn,MyProdr);
	mtrw = matrowcnt(MyProdr);
	if(rownr==-1 or rownr>=mtrw-1)then begin
		insertrowcnt = mtrw - 1;
		if ((rownr==-1) or (mtrw<=1)) then begin
		  insertrowcnt = mtrw;
		end;
    if (insertrowcnt!=0) then begin
      MatRowGet(MyProdr,insertrowcnt-1,MyProd2rw);
      if ((MyProd2rw.stp==1) and Blank(MyProd2rw.Item)) then begin
        insertrowcnt = insertrowcnt - 1;
      end;
    end;
		opermax = 0;
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(MyProdr,i,MyProdrw);
			if(MyProdrw.stp==2)then begin
				if(MyProdrw.OperationNo>opermax)then begin
					opermax = MyProdrw.OperationNo;
				end;
			end;
		end;
		insertrowno = opermax + 1;
		clearrow(MyProdr,MyProdrw,2);
		MyProdrw.OperationNo = insertrowno;
		matrowinsert(MyProdr,insertrowcnt,MyProdrw);
	end else begin
		
		InsertProdOperationRow(MyProdr,rownr);
		
	end;
	putwindowrecord(wn,MyProdr);

  return;
end;

global
updating procedure AddProdInstructionRowDsm()
begin
  Integer wn,nwn;
  Integer rownr,err,mtrw,opermin,opermax,operminrow,opermaxrow,insertrowno,insertrowcnt;
  record MyProdVc MyProdr;
	row MyProdVc MyProdrw;
	integer i;
	
  wn = CurWindow;
	rownr = WindowActiveRow(wn);
	//DeselectWindow(wn,false);
	GetWindowRecord(wn,MyProdr);
	mtrw = matrowcnt(MyProdr);
	if(rownr==-1 or rownr>=mtrw-1)then begin
		insertrowcnt = mtrw;
		clearrow(MyProdr,MyProdrw,3);
		matrowinsert(MyProdr,insertrowcnt,MyProdrw);
	end else begin
		clearrow(MyProdr,MyProdrw,3);
		matrowinsert(MyProdr,rownr,MyProdrw);
	end;
	putwindowrecord(wn,MyProdr);

  return;
end;


global
updating procedure DeleteProdOperRowDsm()
begin
  record MyProdVc MyProdr;
  record ProdOperationVc ProdOpr;
  Boolean testf,foundf;
  row MyProdVc MyProdrw,MyProd2rw;
  Integer wn,rownr,i,mtrw,pos;
	string 200 prodstr;
	string 20 tstr;
  
  testf = true;
  foundf = false;
  pos = 0;
  wn = CurWindow;
	rownr = WindowActiveRow(wn);
	GetWindowRecord(wn,MyProdr);
  MatRowGet(MyProdr,rownr,MyProdrw);
  if (MyProdrw.stp==2) then begin
    ProdOpr.MyProdNr = MyProdr.SerNr;
    ProdOpr.MyProdOperRow = MyProdrw.OperationNo;
    if (ReadFirstKey("MyProdNr",ProdOpr,2,true)==false) then begin
      mtrw = matrowcnt(MyProdr);
      for (i=rownr;i<mtrw;i=i+1) begin
        MatRowGet(MyProdr,i,MyProd2rw);
        if (MyProd2rw.stp==2) then begin
          prodstr = MyProd2rw.MotherOperations;
          if nonblank(prodstr) then begin
            ExtractObj(prodstr,pos,tstr);
            while (nonblank(tstr)) begin
              if (MyProdrw.OperationNo==stringtoint(tstr)) then begin
                foundf = true;
              end;
              ExtractObj(prodstr,pos,tstr);
            end;
          end;
        end;
      end;
      if (foundf==false) then begin
        MatRowDelete(MyProdr,rownr);
        while (testf) begin
          mtrw = MatRowCnt(MyProdr);
          if (rownr<mtrw) then begin
            MatRowGet(MyProdr,rownr,MyProd2rw);
            if (MyProd2rw.stp!=2) then begin
              MatRowDelete(MyProdr,rownr);
              testf = true;
            end else begin
              testf = false;
            end;
          end else begin
            testf = false;
          end;
        end;
        putwindowrecord(wn,MyProdr);
      end else begin
        MessageBox(0,"Операция является исходной для других операций");
      end;
    end else begin
      MessageBox(0,"Операция уже сохранена");
    end;
  end else begin
    MessageBox(0,"Выберите строку с операцией");
  end;
end;