procedure dummy() //##ii
begin //##ii
  SetLangMode(LangRussian,"RUS",0); //##ii
  return; //##ii
end; //##ii

global

updating procedure GenerateOperationSsm() // функция разложения по операциям
begin

  Integer wn, i,j, rwcnt, rwcnt2, recCnt, storeUnit, curComp, prodQty;
  record MyProdVc MyProdr;
  record ProdOperationVc ProdOperationr, ProdOperation2r;
  row MyProdVc MyProdrw, MyProd2rw;
  row ProdOperationVc ProdOperationrw;
  string 255 errStr;
  Boolean TrHs;
  
  curComp = CurrentCompany;
  wn = CurWindow();
  GetWindowRecord(wn,MyProdr);
  rwcnt = matrowcnt(MyProdr);

  if (blank(MyProdr.Qty) or MyProdr.Qty < 1 ) then begin
  	prodQty = 1;
  end else begin
  	prodQty = MyProdr.Qty;
  end;	
  
  if (MyProdr.PRStatusFlag != 2) then begin
  	MessageBox(0, "Статус производства не \"Начато\"");
  	return;
  end;
  
  if (WindowState(wn) != 0) then begin
  	MessageBox(0,"Сохраните запись");
  	return;
  end;

	for (j=0;j<prodQty;j=j+1) begin
  	  	storeUnit = 0;
  		
	  	for (i=0;i<rwcnt;i=i+1) begin

	  	MatRowGet(MyProdr,i,MyProdrw);
		  	switch (MyProdrw.stp) begin
		  	case 1:
			  	if (NonBlank(MyProdrw.Item) and storeUnit == 1) then begin
			  		MatRowGet(ProdOperationr,rwcnt2,ProdOperationrw);
			  		ProdOperationrw.Item = MyProdrw.Item;
			  		ProdOperationrw.Comment = MyProdrw.Comment;
			  		ProdOperationrw.SerialNr = MyProdrw.SerialNr;
			  		ProdOperationrw.InQty = MyProdrw.InQty;
			  		ProdOperationrw.OutQty = MyProdrw.OutQty;
			  		ProdOperationrw.Coefficient = MyProdrw.Coefficient;
			  		ProdOperationrw.Objects = MyProdrw.Objects;
			  		ProdOperationrw.Material = MyProdrw.Material;
			  		MatRowPut(ProdOperationr,rwcnt2,ProdOperationrw);
			  		if (!RecordStore(ProdOperationr,true)) then begin
						errStr = errStr & ProdOperationrw.Item & Chr(13);
			  		end;
			  		rwcnt2 = rwcnt2 + 1;
			  	end;
		  	case 2:
		  		ProdOperation2r.MyProdNr = MyProdr.SerNr;
		  		ProdOperation2r.MyProdOperRow = MyProdrw.OperationNo;	
		    	TrHs = true;
		    	recCnt = 0;	
		  		while (LoopKey("MyProdNr",ProdOperation2r,2,TrHs)) begin
			  		if (ProdOperation2r.MyProdNr != MyProdr.SerNr or ProdOperation2r.MyProdOperRow != MyProdrw.OperationNo ) then begin
			  			TrHs = false;
			  		end else begin
		  				recCnt = recCnt + 1;
		  			end; 		  			
		  		end; ResetLoop(ProdOperation2r);
		  		
	    		if ((prodQty - MyProdrw.Ordered1) > 0 and recCnt == MyProdrw.Ordered1) then begin
	    			RecordNew(ProdOperationr);
		    		ProdOperationr.MyProdNr = MyProdr.SerNr;
		  			ProdOperationr.MyProdOperRow = MyProdrw.OperationNo;
		    	  	ProdOperationr.SerNr = NextSerNr("ProdOperationVc",ProdOperationr.StartDate,-1,false,"");
			  		ProdOperationr.Comment = MyProdrw.ProdComment;
			  		if (RecordStore(ProdOperationr,true)) then begin
			  			storeUnit = 1;
			  			CreateRecordLink(ProdOperationr,curComp,MyProdr,curComp);
			  			CreateRecordLink(MyProdr,curComp,ProdOperationr,curComp);
			  			rwcnt2 = matrowcnt(ProdOperationr);
			  			
			  			MyProdrw.Ordered1 = MyProdrw.Ordered1 + 1;
				    	MatRowPut(MyProdr,i,MyProdrw);
				    	RecordStore( MyProdr, true);
				    end;
				end else begin
					storeUnit = 0;
		    	end;
		  	case 3:
		  		if (NonBlank(MyProdrw.Comment) and storeUnit == 1) then begin
		  			AddToText(MyProdrw.Comment & Chr(32),ProdOperationr);
		  			RecordStore(ProdOperationr,true);
		  		end;
		  		
		  	end; 
	  	
	  	end;
	  
  	end;  
  putwindowrecord(wn,MyProdr);
  if (NonBlank(errStr)) then begin
  	errStr = "Проблема с товаром:" & Chr(13) & Chr(13) & errStr;
  	MessageBox(0,errStr);
  end;

  return;
end;


function LongInt IsAnyProdOperationNotCancelled(LongInt ProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.ProdNr = ProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 1; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 3; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 5; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyProdOperationNotCancelled = res;
  return;
end;

function LongInt IsAnyProdOperationNotFinished(LongInt ProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.ProdNr = ProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end else begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyProdOperationNotFinished = res;
  return;
end;


global
updating function LongInt MyProdVcRecordCheck(var record MyProdVc Prodp,record MyProdVc Prod2p,LongInt stat,LongInt check)
begin
  LongInt res;
  
  res = 0;
  
  if (Prodp.SerNr<=0) then begin
    Prodp.SerNr = NextSerNr("MyProdVc",Prodp.ProdDate,-1,false,"");
  end;
  
LMyProdVcRecChk:;
  MyProdVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordSave(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = 0;
	
  MyProdVcRecordSave = res;
  RETURN;
END;


global
updating function LongInt MyProdVcRecordSaveAfter(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = 0;
  
  MyProdVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordUpdate(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	
	res = 0;
 
  MyProdVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordUpdateAfter(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;
  Boolean ihef;

	res = 0;
  
  MyProdVcRecordUpdateAfter = res;
  RETURN;
END;
