global
<<<<<<< HEAD
updating procedure GenerateOperationSsm()
begin

  Integer wn, rownr, i, operprodcnt, rwcnt, rwcnt2, storeUnit;
=======
updating procedure GenerateOperationSsm() // функция разложения по операциям
begin

  Integer wn, i, rwcnt, rwcnt2, storeUnit, curcomp;
>>>>>>> FETCH_HEAD
  record MyProdVc MyProdr;
  record ProdOperationVc ProdOperationr;
  row MyProdVc MyProdrw, MyProd2rw;
  row ProdOperationVc ProdOperationrw;
  string 255 errStr;
  
  storeUnit = 0;
<<<<<<< HEAD
=======
  curcomp = CurrentCompany;
>>>>>>> FETCH_HEAD
  wn = CurWindow();
  GetWindowRecord(wn,MyProdr);
  rwcnt = matrowcnt(MyProdr);
  
  for (i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(MyProdr,i,MyProdrw);
  	switch (MyProdrw.stp) begin
  	case 1:
	  	if (NonBlank(MyProdrw.Item) and storeUnit == 1) then begin
	  		MatRowGet(ProdOperationr,rwcnt2,ProdOperationrw);
	  		ProdOperationrw.Item = MyProdrw.Item;
	  		ProdOperationrw.Comment = MyProdrw.Comment;
	  		ProdOperationrw.SerialNr = MyProdrw.SerialNr;
	  		ProdOperationrw.InQty = MyProdrw.InQty;
	  		ProdOperationrw.OutQty = MyProdrw.OutQty;
	  		ProdOperationrw.Coefficient = MyProdrw.Coefficient;
	  		ProdOperationrw.Objects = MyProdrw.Objects;
	  		ProdOperationrw.Material = MyProdrw.Material;
	  		MatRowPut(ProdOperationr,rwcnt2,ProdOperationrw);
	  		if (!RecordStore(ProdOperationr,true)) then begin
				errStr = errStr & ProdOperationrw.Item & Chr(13);
	  		end;
	  		rwcnt2 = rwcnt2 + 1;
	  	end;
<<<<<<< HEAD
  		//MessageBox(0,MyProdrw.stp);
  	case 2:
  		RecordNew(ProdOperationr);
  		ProdOperationr.MyProdNr = MyProdr.SerNr;
  		ProdOperationr.MySequence = MyProdrw.OperationNo;	
=======
  	case 2:
  		RecordNew(ProdOperationr);
  		ProdOperationr.MyProdNr = MyProdr.SerNr;
  		ProdOperationr.MyProdOperRow = MyProdrw.OperationNo;	
>>>>>>> FETCH_HEAD
  		if (ReadFirstKey("MyProdNr",ProdOperationr,2,true)) then begin
  			storeUnit = 0; 			
    	end else begin 
    		ProdOperationr.MyProdNr = MyProdr.SerNr;
<<<<<<< HEAD
  			ProdOperationr.MySequence = MyProdrw.OperationNo;
=======
  			ProdOperationr.MyProdOperRow = MyProdrw.OperationNo;
>>>>>>> FETCH_HEAD
    	  	ProdOperationr.SerNr = NextSerNr("ProdOperationVc",ProdOperationr.StartDate,-1,false,"");
	  		ProdOperationr.Comment = MyProdrw.ProdComment;
	  		if (RecordStore(ProdOperationr,true)) then begin
	  			storeUnit = 1;
<<<<<<< HEAD
	  			rwcnt2 = matrowcnt(ProdOperationr);
	  			//MessageBox(0,ProdOperationr.SerNr & "No");
=======
	  			CreateRecordLink(ProdOperationr,curcomp,MyProdr,curcomp);
	  			CreateRecordLink(MyProdr,curcomp,ProdOperationr,curcomp);
	  			rwcnt2 = matrowcnt(ProdOperationr);
>>>>>>> FETCH_HEAD
	    	end;
  		end;
  	case 3:
  		if (NonBlank(MyProdrw.Comment) and storeUnit == 1) then begin
<<<<<<< HEAD
  			ProdOperationr.Math2 = MyProdrw.Comment;
  			MessageBox(0,ProdOperationr.Math2);
=======
  			AddToText(MyProdrw.Comment & Chr(32),ProdOperationr);
>>>>>>> FETCH_HEAD
  			RecordStore(ProdOperationr,true);
  		end;
  	end;
    
  end;  
  
  if (NonBlank(errStr)) then begin
  	errStr = "Проблема с товаром:" & Chr(13) & Chr(13) & errStr;
  	MessageBox(0,errStr);
  end;
<<<<<<< HEAD
  
  /*wn = CurWindow();
  if (WindowState(wn)!=Rs_insert) then
  begin
    rownr = WindowActiveRow(wn);
    GetWindowRecord(wn,MyProdr);
    DeselectWindow(wn,false);
    MatRowGet(MyProdr,rownr,MyProdrw);
    if NonBlank(MyProdrw.InQty) then begin
      for (i=0;i<rownr-1;i=i+1) begin
        MatRowGet(MyProdr,i,MyProd2rw);
        if (MyProd2rw.Item==MyProdrw.Item) then begin
          MyProdrw.SerialNr = MyProd2rw.SerialNr;
        end;
      end;
      if Blank(MyProdrw.SerialNr) then begin
        for(i=0;i<rownr;i=i+1) begin
          matrowget(MyProdr,i,MyProd2rw);
          if(MyProd2rw.stp==2)then begin
            MyProdrw.SerialNr = MyProdr.SerNr & "-" & MyProd2rw.OperationNo;
          end;
        end;
      end;
    end else begin
      for(i=0;i<rownr;i=i+1) begin
        matrowget(MyProdr,i,MyProd2rw);
        if(MyProd2rw.stp==2)then begin
          MyProdrw.SerialNr = MyProdr.SerNr & "-" & MyProd2rw.OperationNo;
        end;
      end;
    end;
    MatRowPut(MyProdr,rownr,MyProdrw);
    PutWindowRecord(wn,MyProdr);
  end else begin
    MessageBox(0, "Сохраните запись");
  end;*/
=======
>>>>>>> FETCH_HEAD

  return;
end;


function LongInt IsAnyProdOperationNotCancelled(LongInt ProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.ProdNr = ProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 1; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 3; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  if (res<0) then begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 5; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyProdOperationNotCancelled = res;
  return;
end;

function LongInt IsAnyProdOperationNotFinished(LongInt ProdNr)
begin 
  LongInt res;
  record ProdOperationVc ProdOpr;
  
  ProdOpr.ProdNr = ProdNr;
  ProdOpr.PRStatusFlag = 0; 
  if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
    res = ProdOpr.SerNr;
  end else begin
    ProdOpr.ProdNr = ProdNr;
    ProdOpr.PRStatusFlag = 2; 
    if (ReadFirstKey("ProdNrPRStatus",ProdOpr,2,true)) then begin
      res = ProdOpr.SerNr;
    end;
  end;
  IsAnyProdOperationNotFinished = res;
  return;
end;


global
updating function LongInt MyProdVcRecordCheck(var record MyProdVc Prodp,record MyProdVc Prod2p,LongInt stat,LongInt check)
begin
  LongInt res;
  
  res = 0;
  
  if (Prodp.SerNr<=0) then begin
    Prodp.SerNr = NextSerNr("MyProdVc",Prodp.ProdDate,-1,false,"");
  end;
  
LMyProdVcRecChk:;
  MyProdVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordSave(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = 0;
	
  MyProdVcRecordSave = res;
  RETURN;
END;


global
updating function LongInt MyProdVcRecordSaveAfter(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = 0;
  
  MyProdVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordUpdate(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	
	res = 0;
 
  MyProdVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt MyProdVcRecordUpdateAfter(var record MyProdVc MyProdr,record MyProdVc MyProd2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;
  Boolean ihef;

	res = 0;
  
  MyProdVcRecordUpdateAfter = res;
  RETURN;
END;
